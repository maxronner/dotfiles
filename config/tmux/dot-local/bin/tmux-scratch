#!/usr/bin/env bash
set -euo pipefail

#–– Default values
MARKER="scratch"
POS=""
COMMAND=()
KILL=0

print_help() {
  cat <<-EOF
Create quick and dirty scratch panes in tmux

Usage: $(basename "$0") [-m MARKER] [-p POSITION] [--] [COMMAND...]

Options:
  -m, --marker MARKER    Name of the pane to find/create (default: $MARKER)
  -p, --position POS     Pane position specifier: 'bottom|b' or 'right|r'
                         (default: right)
  -k, --kill             Kill the pane after running the command
  -h, --help             Show this help message and exit

Everything after the '--' is treated as the COMMAND to run in your pane;
e.g.:

  $(basename "$0") -m ai -p bottom -- tgpt --chat --model gpt-4
EOF
}

#–– Use GNU getopt to support long options and `--`
OPTS=$(getopt \
  --options m:p:hk \
  --longoptions marker:,position:,help,kill \
  --name "$(basename "$0")" \
  -- "$@"
) || exit 1

eval set -- "$OPTS"

#–– Parse flags
while true; do
  case "$1" in
    -m|--marker)
      MARKER="__$2__"
      shift 2
      ;;
    -p|--position)
      POS="$2"
      shift 2
      ;;
    -k|--kill)
      KILL=1
      shift
      ;;
    -h|--help)
      print_help
      exit 0
      ;;
    --)
      shift
      break
      ;;
    *)
      # Should never happen
      echo "Unexpected option: $1" >&2
      exit 1
      ;;
  esac
done

#–– Anything left is the command to run
if [[ $# -gt 0 ]]; then
  COMMAND=("$@")
  if [ "$KILL" -eq 0 ]; then
    COMMAND+=("; read")
  fi
fi

#–– Normalize POS into the tmux args you want
case "$POS" in
  bottom|b)
    POS_ARGS="-f -l 12"
    ;;
  right|r|"" )
    POS_ARGS="-fh -l 80"
    ;;
  *)
    echo "Unknown position: '$POS'" >&2
    exit 1
    ;;
esac

exec &>/dev/null # Hide output

#–– Configuration & discovery
SESSION="$(tmux display-message -p '#S')"
SRC_IDX="$(tmux display-message -p '#I')"

#–– Try to locate any pane titled $MARKER, anywhere in this session
#    Output format: "session:window.pane  TITLE"
PANE_INFO=$(
  tmux list-panes -a -F "#{session_name}:#{window_index}.#{pane_index} #{pane_title}" \
  | grep -F "$SESSION" \
  | grep -F "$MARKER" || true
)

LAST_PANE_INDEX=$(tmux list-panes -t "$SESSION:$SRC_IDX" | wc -l)

if [[ -n "$PANE_INFO" ]]; then
  echo "Found helper pane: $PANE_INFO"
  # –– We found our helper pane… let’s parse out its ID and owning window
  PANE_ID="${PANE_INFO%% *}"                          # e.g. "mysession:3.2"
  PANE_WIN="${PANE_ID#*:}"                            # drop session prefix → "3.2"
  WIN_IDX="${PANE_WIN%%.*}"                           # take "3" out of "3.2"

  if (( WIN_IDX == SRC_IDX )); then
    if (( LAST_PANE_INDEX == 1 )); then
      echo "It is in the source window and is the only pane → do nothing"
      exit
    fi
    echo "It’s in the source window → moving it to target"
    tmux break-pane -d -s "$PANE_ID"                   # pop it out into its own window

    # -- Select the target window for easy access with last-window
    LAST_INDEX=$(tmux list-windows -F "#{window_index}" | sort -n | tail -1)
    tmux select-window -t :"$LAST_INDEX"
    tmux select-window -t "$SESSION:$SRC_IDX"
  else
    echo "It’s somewhere else → moving it back to source"
    tmux move-pane -s "$PANE_ID" -t "$SESSION:$SRC_IDX.$LAST_PANE_INDEX" $POS_ARGS
    echo "Selecting window"
    tmux select-window -t "$SESSION:$SRC_IDX"
  fi

else
  COMMAND_STRING="${COMMAND[*]}"
  if (( ${#COMMAND[@]} )); then
    echo "Creating new pane with: $COMMAND_STRING"
  else
    echo "Creating new pane (no command)"
  fi

  CURRENT_DIR=$(tmux display-message -p -F "#{pane_current_path}")
  NEW_PANE=$(
    tmux split-window -P -F '#{pane_id}' \
      -t "$SESSION:$SRC_IDX.$LAST_PANE_INDEX" \
      -c "$CURRENT_DIR" \
      $POS_ARGS \
      ${COMMAND_STRING:+ "$COMMAND_STRING"}
  )
  tmux select-pane -t "$NEW_PANE" -T "$MARKER"
fi

